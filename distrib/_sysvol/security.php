<?php/** MuWebClone validate functions †*/class valid extends logs{	function __construct()	{		$this->clearGet();		$this->clearPost();	}	private function clearGet()	{		foreach ($_GET as $id=>$v)		{			$v = trim(htmlspecialchars($v,ENT_QUOTES));			$v = preg_replace("/(\&lt\;br \/\&gt\;)|(\&lt\;br\&gt\;)/",' <br /> ',$v);			//$v = str_replace(' ','', preg_replace("/[^[:digit:]A-Za-zА-Яа-я_@.\!\]\[ \-+()=]/ui",'',$v));			if (!self::parse($_GET[$id],$v))			{				self::WriteLogs("Get_","Maybe GET massive inject, value ".$_GET[$id]);			}			$_GET[$id] = $v;		}	}	private  function clearPost()	{		foreach ($_POST as $id=>$v)		{			if(is_array($v))				continue;			$v = trim(htmlspecialchars(self::checkText($v),ENT_QUOTES));			//$v =  preg_replace("/(\&lt\;br \/\&gt\;)|(\&lt\;br\&gt\;)/",' <br /> ',$v);			if (get_magic_quotes_gpc()) $v = stripslashes($v);			$v = str_replace('`','&quot;',$v);			//$v = str_replace(' ','', preg_replace("/[^[:digit:]A-Za-z_@.\!\]\[ \-+()=]/",'',$v));			if (!self::parse(trim($_POST[$id]),$v))			{				self::WriteLogs("Post_","Maybe POST massive inject, value ".$_POST[$id]);			}			$_POST[$id]=$v;		}	}	static private function parse ($before,$last)	{		if ($before!=$last) return false;		return true;	}	static public function decode ($str)	{		$str = str_replace('&nbsp;',' ',$str);		$trans_tbl = get_html_translation_table (HTML_ENTITIES);		$trans_tbl = array_flip ($trans_tbl);		return strtr ($str, $trans_tbl);	}	/**	 * Преобразование ссылок в рабочее состояние после htmlspecialchars	 * @param string $link текст ссылки	 * @return string преобразованная сслыка	 */	static public function linkDec($link)	{		return str_replace("&amp;","&",$link);	}	/**	 * чистит новостные блоки от иньекций <script>... <?php...	 * @param $text	 * @return mixed	 */	static public function checkText($text)	{		// $text = nl2br($text);		$cleared = array("<?php", "<?");		return str_replace($cleared,'',$text);	}}/** validate functions end †*/